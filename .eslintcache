[{"/Users/krzysztofdziedzic/react/cms-frontend/src/index.js":"1","/Users/krzysztofdziedzic/react/cms-frontend/src/App.js":"2","/Users/krzysztofdziedzic/react/cms-frontend/src/reportWebVitals.js":"3","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/login/LoginScreen.js":"4","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/register/RegisterScreen.js":"5","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/not_found/NotFoundScreen.js":"6","/Users/krzysztofdziedzic/react/cms-frontend/src/firebaseConfig.js":"7","/Users/krzysztofdziedzic/react/cms-frontend/src/muiTheme.js":"8","/Users/krzysztofdziedzic/react/cms-frontend/src/styles/mui/generalStyles.js":"9","/Users/krzysztofdziedzic/react/cms-frontend/src/helpers/firebase/firebaseErrorsHelper.js":"10","/Users/krzysztofdziedzic/react/cms-frontend/src/helpers/firebase/firebaseAuthObserver.js":"11","/Users/krzysztofdziedzic/react/cms-frontend/src/components/toolbar.js":"12","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/products_management/productsManagement.js":"13","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/products_management/ProductsManagement.js":"14","/Users/krzysztofdziedzic/react/cms-frontend/src/backend/productsRepository.js":"15","/Users/krzysztofdziedzic/react/cms-frontend/src/backendConfig.js":"16","/Users/krzysztofdziedzic/react/cms-frontend/src/components/dialog/productManagementDialog.js":"17","/Users/krzysztofdziedzic/react/cms-frontend/src/components/alert/alerts.js":"18","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/home/HomeScreen.js":"19","/Users/krzysztofdziedzic/react/cms-frontend/src/helpers/price/priceHelper.js":"20"},{"size":500,"mtime":1608574986633,"results":"21","hashOfConfig":"22"},{"size":1474,"mtime":1609090652645,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1608567676926,"results":"24","hashOfConfig":"22"},{"size":5555,"mtime":1608848444712,"results":"25","hashOfConfig":"22"},{"size":7181,"mtime":1608814571625,"results":"26","hashOfConfig":"22"},{"size":110,"mtime":1608641668791,"results":"27","hashOfConfig":"22"},{"size":500,"mtime":1608666520606,"results":"28","hashOfConfig":"22"},{"size":546,"mtime":1608840101132,"results":"29","hashOfConfig":"22"},{"size":467,"mtime":1609016901538,"results":"30","hashOfConfig":"22"},{"size":188,"mtime":1608813290904,"results":"31","hashOfConfig":"22"},{"size":476,"mtime":1608990572971,"results":"32","hashOfConfig":"22"},{"size":3991,"mtime":1609085993903,"results":"33","hashOfConfig":"22"},{"size":611,"mtime":1608913703591,"results":"34","hashOfConfig":"22"},{"size":5622,"mtime":1609095921637,"results":"35","hashOfConfig":"22"},{"size":520,"mtime":1609082808595,"results":"36","hashOfConfig":"22"},{"size":150,"mtime":1608916459472,"results":"37","hashOfConfig":"22"},{"size":11825,"mtime":1609083105890,"results":"38","hashOfConfig":"22"},{"size":457,"mtime":1609064052098,"results":"39","hashOfConfig":"22"},{"size":106,"mtime":1609064026128,"results":"40","hashOfConfig":"22"},{"size":82,"mtime":1609095602001,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1uubitg",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/krzysztofdziedzic/react/cms-frontend/src/index.js",[],["91","92"],"/Users/krzysztofdziedzic/react/cms-frontend/src/App.js",["93"],"import LoginScreen from './screens/login/LoginScreen';\nimport RegisterScreen from './screens/register/RegisterScreen';\nimport HomeScreen from './screens/home/HomeScreen';\nimport ProducstManagement from './screens/products_management/ProductsManagement';\nimport MainAppBar from './components/toolbar';\nimport mainTheme from './muiTheme';\n\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { onAuthStateChange } from './helpers/firebase/firebaseAuthObserver';\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport NotFoundScreen from './screens/not_found/NotFoundScreen';\n\nfunction App() {\n  \n  useEffect(() => {\n    const unsubscribe = onAuthStateChange();\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <ThemeProvider theme = { mainTheme }>\n      <Router>\n\n      <MainAppBar />\n\n        <Switch>\n          <Route exact path=\"/register\">\n            <RegisterScreen />\n          </Route>\n          <Route exact path=\"/login\">\n            <LoginScreen />\n          </Route>\n          <Route exact path=\"/products_management\">\n            <ProducstManagement />\n          </Route>\n          <Route exact path=\"/\">\n            <HomeScreen />\n          </Route>\n          <Route>\n            <NotFoundScreen />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","/Users/krzysztofdziedzic/react/cms-frontend/src/reportWebVitals.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/screens/login/LoginScreen.js",["94","95"],"import '../../styles/general/style.css';\nimport Paper from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useForm, Controller } from 'react-hook-form';\nimport { generalStyles } from '../../styles/mui/generalStyles';\nimport React, { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\nimport 'firebase/auth';\nimport firebaseApp from '../../firebaseConfig';\n\nfunction LoginScreen() {\n\n    const { handleSubmit, control, errors: fieldsErrors, reset } = useForm();\n    const [isInProgress, setProgressVisibility] = useState(false);\n    const [loginError, setLoginError] = useState(\"\");\n    const history = useHistory(); \n\n    const classes = generalStyles();\n\n    const auth = firebaseApp.auth();\n\n    const onLoginClicked = async data => {\n        console.log(data);\n        setProgressVisibility(true);\n        try {\n            const result = await auth.signInWithEmailAndPassword(data.email, data.password);\n            history.replace('/');\n        } catch (error) {\n            setLoginError(error.message);\n        } finally {\n            setProgressVisibility(false);\n        }\n\n    }\n\n    return (\n        <Paper className=\"main_container\">\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <div className=\"header_style\">Logowanie</div>\n                </Grid>\n\n                <form onSubmit={handleSubmit(onLoginClicked)} className={classes.fillMaxWidth}>\n                    <Grid item xs={12} className={classes.centerChildren}>\n                        <FormControl className={classes.margin} variant=\"standard\">\n                            <Controller\n                                name=\"email\"\n                                as={\n                                    <TextField\n                                        id=\"email\"\n                                        helperText={fieldsErrors.email ? fieldsErrors.email.message : null}\n                                        variant=\"standard\"\n                                        label=\"Email\"\n                                        error={fieldsErrors.email !== undefined}\n                                        InputProps={{\n                                            className: classes.input\n                                        }}\n                                    />\n                                }\n                                control={control}\n                                defaultValue=\"\"\n                                rules={{\n                                    required: 'Pole wymagane',\n                                    pattern: {\n                                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                                        message: 'Niepoprawny email'\n                                    }\n                                }}\n                            />\n                        </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.centerChildren}>\n                        <FormControl className={classes.margin} variant=\"standard\">\n                            <Controller\n                                name=\"password\"\n                                as={\n                                    <TextField\n                                        id=\"password\"\n                                        helperText={fieldsErrors.password ? fieldsErrors.password.message : null}\n                                        variant=\"standard\"\n                                        label=\"Hasło\"\n                                        error={fieldsErrors.password !== undefined}\n                                        type=\"password\"\n                                        InputProps={{\n                                            className: classes.input\n                                        }}\n                                    />\n                                }\n                                control={control}\n                                defaultValue=\"\"\n                                rules={{\n                                    required: 'Pole wymagane',\n                                }}\n                            />\n                        </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.centerChildren}>\n                        {isInProgress && <CircularProgress />}\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.centerChildren}>\n                        {loginError !== \"\" && <div className={\"general_error\"}>{loginError}</div>}\n                    </Grid>\n\n                    <Grid item xs={12} className={`${classes.centerChildren} ${classes.margin}`}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.margin}>\n                            Zaloguj się\n                         </Button>\n                    </Grid>\n\n                    <Grid item xs={12} className=\"centered_grid\">\n                        <div>Jeśli nie masz konta, <Link to=\"/register\" className={\"link\"}> zarejetruj się. </Link></div>\n                    </Grid>\n                </form>\n            </Grid>\n        </Paper>\n    );\n}\n\nexport default LoginScreen;","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/register/RegisterScreen.js",["96","97","98","99"],"import '../../styles/general/style.css';\nimport Paper from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControl from '@material-ui/core/FormControl';\nimport React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { generalStyles } from '../../styles/mui/generalStyles';\nimport { getRegisterError } from '../../helpers/firebase/firebaseErrorsHelper';\nimport { useHistory } from \"react-router-dom\";\n\nimport 'firebase/auth';\nimport firebaseApp from '../../firebaseConfig';\n\nfunction RegisterScreen() {\n\n    const [isInProgress, setProgressVisibility] = useState(false);\n    const [registerError, setRegisterError] = useState(\"\");\n    const { handleSubmit, control, errors: fieldsErrors, reset } = useForm();\n    const history = useHistory(); \n\n    const auth = firebaseApp.auth();\n    const classes = generalStyles();\n\n\n    const onRegisteredCliked = async data => {\n        try {\n            setProgressVisibility(true);\n            var registeredUser = await auth.createUserWithEmailAndPassword(data.email, data.password);\n            history.goBack();\n            reset();\n        } catch (error) {\n            setRegisterError(getRegisterError(error.code));\n        }\n        setProgressVisibility(false);\n    }\n\n    return (\n        <Paper className=\"main_container\">\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <div className=\"header_style\">Rejestracja</div>\n                </Grid>\n\n                <form onSubmit={handleSubmit(onRegisteredCliked)} className={classes.fillMaxWidth}>\n                    <Grid item xs={12} className={classes.centerChildren}>\n                        <FormControl className={classes.margin} variant=\"standard\">\n                            <Controller\n                                name=\"email\"\n                                as={\n                                    <TextField\n                                        id=\"email\"\n                                        helperText={fieldsErrors.email ? fieldsErrors.email.message : null}\n                                        variant=\"standard\"\n                                        label=\"Email\"\n                                        error={fieldsErrors.email != undefined}\n                                        InputProps={{\n                                            className: classes.input\n                                        }}\n                                    />\n                                }\n                                control={control}\n                                defaultValue=\"\"\n                                rules={{\n                                    required: 'Pole wymagane',\n                                    pattern: {\n                                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                                        message: 'Niepoprawny email'\n                                    }\n                                }}\n                            />\n                        </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.centerChildren}>\n                        <FormControl className={classes.margin} variant=\"standard\">\n                            <Controller\n                                name=\"password\"\n                                as={\n                                    <TextField\n                                        id=\"password\"\n                                        helperText={fieldsErrors.password ? fieldsErrors.password.message : null}\n                                        variant=\"standard\"\n                                        label=\"Hasło\"\n                                        error={fieldsErrors.password != undefined}\n                                        type=\"password\"\n                                        InputProps={{\n                                            className: classes.input\n                                        }}\n                                    />\n                                }\n                                control={control}\n                                defaultValue=\"\"\n                                rules={{\n                                    required: 'Pole wymagane',\n                                    minLength: {\n                                        value: 4,\n                                        message: \"Podane hasło jest za krótkie\"\n                                    }\n                                }}\n                            />\n                        </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.centerChildren}>\n                        <FormControl className={classes.margin} variant=\"standard\">\n                            <Controller\n                                name=\"passwordRe\"\n                                as={\n                                    <TextField\n                                        id=\"passwordRe\"\n                                        helperText={fieldsErrors.passwordRe ? fieldsErrors.passwordRe.message : null}\n                                        variant=\"standard\"\n                                        label=\"Powtórz hasło\"\n                                        error={fieldsErrors.passwordRe != undefined}\n                                        type=\"password\"\n                                        InputProps={{\n                                            className: classes.input\n                                        }}\n                                    />\n                                }\n                                control={control}\n                                defaultValue=\"\"\n                                rules={{\n                                    required: 'Pole wymagane',\n                                    minLength: {\n                                        value: 4,\n                                        message: \"Podane hasło jest za krótkie\"\n                                    }\n                                }}\n                            />\n                        </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.centerChildren}>\n                        {isInProgress && <CircularProgress />}\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.centerChildren}>\n                            {registerError !== \"\" && <div className={\"general_error\"}>{registerError}</div>}\n                    </Grid>\n\n                    <Grid item xs={12} className={`${classes.centerChildren} ${classes.margin}`}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.margin}>\n                            Zarejestruj się\n                </Button>\n                    </Grid>\n                </form>\n            </Grid>\n        </Paper>\n    );\n}\n\nexport default RegisterScreen;","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/not_found/NotFoundScreen.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/firebaseConfig.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/muiTheme.js",["100"],"import { createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\n\nconst mainTheme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#BB86FC',\n        },\n        secondary: {\n            main: '#232323',\n        },\n    },\n    overrides: {\n        MuiFormLabel: {\n          root: {\n            \"&$focused\": {\n              color: \"#BB86FC\",\n            },\n            color: \"#eeeeee\"\n          }, \n          \n          focused: {}\n        }\n      }\n});\n\nexport default mainTheme;","/Users/krzysztofdziedzic/react/cms-frontend/src/styles/mui/generalStyles.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/helpers/firebase/firebaseErrorsHelper.js",["101"],"export const getRegisterError = errorCode => {\n    if (errorCode == \"auth/email-already-in-use\") return \"Podany email jest zajęty\";\n    return \"Coś poszło nie tak. Spróbuj ponownie\";\n}","/Users/krzysztofdziedzic/react/cms-frontend/src/helpers/firebase/firebaseAuthObserver.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/components/toolbar.js",["102"],"import React, { useEffect, useState } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport { withRouter } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport 'firebase/auth';\nimport firebaseApp from '../firebaseConfig';\n\nconst auth = firebaseApp.auth();\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        flexGrow: 1,\n        textAlign: 'start'\n    },\n}));\n\n\nconst MainAppBar = withRouter(({ history }) => {\n\n    const classes = useStyles();\n    const [shouldDisplayLoginButton, setLoginButtonVisibility] = useState(true);\n    const [isUserLoggedIn, setUserLoggedIn] = useState(false)\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    }\n\n    const handleProfileClick = () => {\n        history.replace('/products_management')\n        setAnchorEl(null);\n    };\n\n    const handleLogout = async () => {\n        try {\n            await auth.signOut();\n            setAnchorEl(null);\n            history.replace('/');\n        } catch (error) {\n            alert(\"Coś poszło nie tak, spróbuj ponowanie!\");\n        }\n    }\n\n    useEffect(() => {\n        const unsubscribe = history.listen((location, action) => {\n            setLoginButtonVisibility(location.pathname !== '/login' && location.pathname !== '/register')\n        });\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                setUserLoggedIn(true);\n            } else {\n                setUserLoggedIn(false);\n            }\n        });\n        return () => {\n            unsubscribe();\n        }\n    });\n\n\n\n    return (\n\n        <AppBar position=\"sticky\" color=\"secondary\">\n            <Toolbar>\n                <Button color=\"inherit\" onClick={() => history.replace('/')} >Home</Button>\n\n                <Box className={classes.title}> </Box>\n                {shouldDisplayLoginButton ?\n                    isUserLoggedIn\n                        ? [<IconButton\n                            aria-label=\"account of current user\"\n                            aria-controls=\"menu-appbar\"\n                            aria-haspopup=\"true\"\n                            color=\"inherit\"\n                            onClick={handleMenu}>\n                            <AccountCircle />\n                        </IconButton>,\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={anchorEl}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            open={open}\n                            onClose={handleMenuClose}>\n                            <MenuItem onClick={handleProfileClick}>Moje konto</MenuItem>\n                            <MenuItem onClick={handleLogout}>Wyloguj</MenuItem>\n                        </Menu>\n                        ]\n                        : <Button color=\"inherit\" onClick={() => history.push('/login')} >Zaloguj się</Button>\n                    : null\n                }\n\n            </Toolbar>\n        </AppBar>\n    )\n});\n\nexport default MainAppBar;","/Users/krzysztofdziedzic/react/cms-frontend/src/screens/products_management/productsManagement.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/screens/products_management/ProductsManagement.js",["103","104","105","106","107"],"/Users/krzysztofdziedzic/react/cms-frontend/src/backend/productsRepository.js",["108","109"],"import { baseUrl } from '../backendConfig';\nimport axios from \"axios\";\n\nexport const getUsersProducts = async () => {\n    try {\n        let responseData = await axios.get(`${baseUrl}users/products`)\n        return responseData;\n    } catch (error) {\n        throw ({ 'error': error });\n    }\n}\n\nexport const addProduct = async (body) => {\n    try {\n        let responseData = await axios.post(`${baseUrl}users/products`, body);\n        return responseData;\n    } catch (error) {\n        throw ({'error': error});\n    }\n}","/Users/krzysztofdziedzic/react/cms-frontend/src/backendConfig.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/components/dialog/productManagementDialog.js",["110","111"],"import Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Button from '@material-ui/core/Button';\nimport Slide from '@material-ui/core/Slide';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport Image from '@material-ui/icons/Image';\n\nimport { useForm, Controller } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { forwardRef, useState } from 'react';\nimport { generalStyles } from '../../styles/mui/generalStyles';\n\nimport { addProduct } from '../../backend/productsRepository';\n\nimport 'firebase/storage';\nimport firebaseApp from '../../firebaseConfig';\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    dialog: {\n        background: '#232323',\n    },\n    container: {\n        padding: '16px',\n        width: '100%'\n    },\n    margin: {\n        margin: '16px',\n        width: \"100%\"\n    },\n    imageLoader: {\n        margin: '22px 0 0 0'\n    },\n    imageIcon: {\n        color: \"white\",\n        width: \"120px\",\n        height: \"120px\",\n        padding: \"6px\"\n    }\n}));\n\n\nconst Transition = forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\nfunction ProductManagementDialog(props) {\n    const classes = useStyles();\n    const styles = generalStyles();\n\n    const { handleSubmit, control, errors: fieldsErrors, reset } = useForm();\n    const [isPublished, setIsPublished] = useState(false);\n    const [imageUrl, setImageUrl] = useState(null);\n    const [isInProgress, setInProgress] = useState(false);\n\n    const onCreateProductClicked = async data => {\n        try {\n            setInProgress(true);\n            let response = await addProduct({\n                name: data.name,\n                description: data.description,\n                price: data.price,\n                isPublished: isPublished,\n                imageUrl: imageUrl\n            });\n            props.onProductAdded(response.data);\n            props.handleClose();\n        } catch (error) {\n            alert(\"Coś poszło nie tak, spróbuj ponownie\");\n        } finally {\n            setInProgress(false);\n        }\n    }\n\n    const handleSwitchStateChange = () => {\n        setIsPublished(!isPublished);\n    }\n\n    const handleFileUpload = (e) => {\n        const image = e.target.files[0];\n        if (image) {\n            const storage = firebaseApp.storage();\n            const fileName = `${Date.now()}_${image.name}}`;\n            const imageUploadTask = storage.ref(`images/${fileName}`).put(image);\n\n            setImageUrl(\"\"); // Set image URL uploading in progress\n\n            imageUploadTask.on('state_changed',\n                (snapshot) => {\n\n                }, (error) => {\n                    onImageFetchedError();\n                }, async () => {\n                    try {\n                        let imageUrl = await storage.ref('images').child(`${fileName}`).getDownloadURL();\n                        setImageUrl(imageUrl);\n                    } catch (error) {\n                        console.log(error);\n                        onImageFetchedError();\n                    }\n                });\n        }\n    }\n\n    const onImageFetchedError = () => {\n        setImageUrl(null);\n        alert(\"Coś poszło nie tak, spróbuj ponownie\");\n    }\n\n    return (\n        <Dialog\n            open={props.open}\n            onClose={props.handleClose}\n            fullScreen\n            TransitionComponent={Transition}>\n\n            <AppBar className={classes.appBar} color=\"primary\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={props.handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {props.isInEditMode ? \"Edytuj Produkt\" : \"Dodaj nowy produkt\"}\n                    </Typography>\n                    <Button autoFocus color=\"inherit\" onClick={handleSubmit(onCreateProductClicked)}>\n                        {props.isInEditMode ? \"Zapisz\" : \"Dodaj\"}\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <DialogContent className={classes.dialog}>\n                <Grid container spacing={3} className={classes.container} justify=\"center\">\n\n                    <ImageUploader imageUrl={imageUrl} handleFileUpload={handleFileUpload} styles={styles} classes={classes} />\n\n                    <Grid item xs={6}>\n                        <form onSubmit={handleSubmit(onCreateProductClicked)}>\n                            <Grid item xs={12}>\n                                <FormControl className={classes.margin} variant=\"standard\">\n                                    <Controller\n                                        name=\"name\"\n                                        as={\n                                            <TextField\n                                                id=\"name\"\n                                                helperText={fieldsErrors.name ? fieldsErrors.name.message : null}\n                                                variant=\"standard\"\n                                                label=\"Nazwa\"\n                                                error={fieldsErrors.name !== undefined}\n                                                InputProps={{\n                                                    className: styles.input\n                                                }} />\n                                        }\n                                        control={control}\n                                        defaultValue=\"\"\n                                        rules={{\n                                            required: 'Pole wymagane',\n                                        }}\n                                    />\n                                </FormControl>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <FormControl className={classes.margin} variant=\"standard\">\n                                    <Controller\n                                        name=\"price\"\n                                        as={\n                                            <TextField\n                                                id=\"price\"\n                                                helperText={fieldsErrors.price ? fieldsErrors.price.message : null}\n                                                variant=\"standard\"\n                                                label=\"Cena\"\n                                                error={fieldsErrors.price !== undefined}\n                                                InputProps={{\n                                                    className: styles.input\n                                                }}\n                                            />\n                                        }\n                                        control={control}\n                                        defaultValue=\"\"\n                                        rules={{\n                                            required: 'Pole wymagane',\n                                        }}\n                                    />\n                                </FormControl>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <FormControl className={classes.margin} variant=\"standard\">\n                                    <Controller\n                                        name=\"description\"\n                                        as={\n                                            <TextField\n                                                id=\"description\"\n                                                helperText={fieldsErrors.description ? fieldsErrors.description.message : null}\n                                                variant=\"standard\"\n                                                label=\"Opis\"\n                                                error={fieldsErrors.description !== undefined}\n                                                multiline\n                                                InputProps={{\n                                                    className: styles.input\n                                                }}\n                                            />\n                                        }\n                                        control={control}\n                                        defaultValue=\"\"\n                                        rules={{\n                                            required: 'Pole wymagane',\n                                        }}\n                                    />\n                                </FormControl>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <FormControlLabel\n                                    className={`${classes.margin} ${styles.text}`}\n                                    control={\n                                        <Switch\n                                            color=\"primary\"\n                                            checked={isPublished}\n                                            onClick={handleSwitchStateChange}\n                                            name=\"isPublished\"\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />}\n                                    label=\"Czy opublikować?\"\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} className={`${styles.margin} ${styles.centerChildren}`}>\n                                {isInProgress && <CircularProgress />}\n                            </Grid>\n\n                        </form>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        \n        </Dialog>\n    );\n}\n\nfunction ImageUploader(props) {\n    const { imageUrl } = props;\n    const { classes } = props;\n    const { styles } = props;\n\n    return (\n        <Grid container className={classes.imageLoader} justify=\"center\">\n            <Grid item xs={12} sm={3} md={2} className={styles.centerChildren}>\n                {imageUrl === null\n                    ? <Image className={classes.imageIcon} />\n                    : imageUrl === \"\" ? <Box className={`${classes.imageIcon} ${styles.centerChildrenVertically}`}> <CircularProgress /> </Box>\n                        : <img className={classes.imageIcon} src={imageUrl} />}\n            </Grid>\n            <Grid item xs={12} sm={3} md={2} className={styles.centerChildrenVertically}>\n                <Button\n                    variant=\"contained\"\n                    component=\"label\"\n                    color=\"primary\">\n                    Dodaj zdjęcie\n                        <input type=\"file\" hidden onChange={props.handleFileUpload} />\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default ProductManagementDialog;","/Users/krzysztofdziedzic/react/cms-frontend/src/components/alert/alerts.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/screens/home/HomeScreen.js",[],"/Users/krzysztofdziedzic/react/cms-frontend/src/helpers/price/priceHelper.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":10,"column":10,"nodeType":"118","messageId":"119","endLine":10,"endColumn":20},{"ruleId":"116","severity":1,"message":"120","line":19,"column":58,"nodeType":"118","messageId":"119","endLine":19,"endColumn":63},{"ruleId":"116","severity":1,"message":"121","line":32,"column":19,"nodeType":"118","messageId":"119","endLine":32,"endColumn":25},{"ruleId":"116","severity":1,"message":"122","line":31,"column":17,"nodeType":"118","messageId":"119","endLine":31,"endColumn":31},{"ruleId":"123","severity":1,"message":"124","line":58,"column":67,"nodeType":"125","messageId":"126","endLine":58,"endColumn":69},{"ruleId":"123","severity":1,"message":"124","line":87,"column":70,"nodeType":"125","messageId":"126","endLine":87,"endColumn":72},{"ruleId":"123","severity":1,"message":"124","line":117,"column":72,"nodeType":"125","messageId":"126","endLine":117,"endColumn":74},{"ruleId":"116","severity":1,"message":"127","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":13},{"ruleId":"123","severity":1,"message":"128","line":2,"column":19,"nodeType":"125","messageId":"126","endLine":2,"endColumn":21},{"ruleId":"129","severity":1,"message":"130","line":64,"column":8,"nodeType":"131","endLine":64,"endColumn":10,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":82,"column":15,"nodeType":"134","endLine":93,"endColumn":6},{"ruleId":"123","severity":1,"message":"124","line":102,"column":83,"nodeType":"125","messageId":"126","endLine":102,"endColumn":85},{"ruleId":"135","severity":1,"message":"136","line":111,"column":35,"nodeType":"137","endLine":111,"endColumn":65},{"ruleId":"123","severity":1,"message":"124","line":120,"column":84,"nodeType":"125","messageId":"126","endLine":120,"endColumn":86},{"ruleId":"135","severity":1,"message":"136","line":129,"column":35,"nodeType":"137","endLine":129,"endColumn":65},{"ruleId":"138","severity":1,"message":"139","line":9,"column":9,"nodeType":"140","messageId":"141","endLine":9,"endColumn":36},{"ruleId":"138","severity":1,"message":"139","line":18,"column":9,"nodeType":"140","messageId":"141","endLine":18,"endColumn":34},{"ruleId":"116","severity":1,"message":"120","line":70,"column":58,"nodeType":"118","messageId":"119","endLine":70,"endColumn":63},{"ruleId":"135","severity":1,"message":"136","line":270,"column":27,"nodeType":"137","endLine":270,"endColumn":79},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'reset' is assigned a value but never used.","'result' is assigned a value but never used.","'registeredUser' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'green' is defined but never used.","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["144"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},"Update the dependencies array to be: [history]",{"range":"147","text":"148"},[1895,1897],"[history]"]